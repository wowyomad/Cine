#pragma once
#include "glash/glash_pch.hpp"

namespace glash
{
	using Color = glm::vec4;
	namespace color {
		constexpr Color RED = Color(255, 0, 0, 0);
		constexpr Color GREEN = Color(0, 255, 0, 0);
		constexpr Color BLUE = Color(0, 0, 255, 0);
	}

	enum GLTarget
	{
		ARRAY_BUFFER = GL_ARRAY_BUFFER,
		ARRAY_ELEMENT = GL_ELEMENT_ARRAY_BUFFER,
	};

	enum GLBufferUsage : GLint
	{
		STREAM_DRAW = GL_STREAM_DRAW,
		STREAM_READ = GL_STREAM_READ,
		STREAM_COPY = GL_STREAM_COPY,
		STATIC_DRAW = GL_STATIC_DRAW,
		STATIC_READ = GL_STATIC_READ,
		STATIC_COPY = GL_STATIC_COPY,
		DYNAMIC_DRAW = GL_DYNAMIC_DRAW,
		DYNAMIC_READ = GL_DYNAMIC_READ,
		DYNAMIC_COPY = GL_DYNAMIC_COPY
	};

	enum GLAttributeType : GLint
	{
	BYTE = GL_BYTE,
	UNSIGNED_BYTE = GL_UNSIGNED_BYTE,
	SHORT = GL_SHORT,
	UNSIGNED_SHORT = GL_UNSIGNED_SHORT,
	INT = GL_INT,
	UNSIGNED_INT = GL_UNSIGNED_INT,
	FLOAT = GL_FLOAT,
	BYTES_2 = GL_2_BYTES,
	BYTES_3 = GL_3_BYTES,
	BYTES_4 = GL_4_BYTES,
	DOUBLE = GL_DOUBLE
	};

	enum GLStatus : GLint
	{
		SHADER_COMPILE = GL_COMPILE_STATUS,
		SHADER_INFO_LOG_LENGTH = GL_INFO_LOG_LENGTH,
		SHADER_SOURCE_LENGTH = GL_SHADER_SOURCE_LENGTH,
		GLShaderType = GL_SHADER_TYPE,
		PROGRAM_LINK = GL_LINK_STATUS,
		PROGRAM_VALIDATE = GL_VALIDATE_STATUS,
		PROGRAM_INFO_LOG_LENGTH = GL_INFO_LOG_LENGTH,
		PROGRAM_ATTACHED_SHADERS = GL_ATTACHED_SHADERS,
		PROGRAM_ACTIVE_UNIFORMS = GL_ACTIVE_UNIFORMS,
		PROGRAM_ACTIVE_ATTRIBUTES = GL_ACTIVE_ATTRIBUTES

	};

	enum GLShaderType : GLint
	{
		VERTEX_SHADER = GL_VERTEX_SHADER,
		FRAGMENT_SHADER = GL_FRAGMENT_SHADER,
		COMPUTE_SHADER = GL_COMPUTE_SHADER,
		TESS_CONTROL_SHADER = GL_TESS_CONTROL_SHADER,
		TESS_EVALUATION_SHADER = GL_TESS_EVALUATION_SHADER,
		GEOMETRY_SHADER = GL_GEOMETRY_SHADER,
		NONE = -1,
	};

	enum GLSampler : GLint
	{
		SAMPLER_1D = GL_SAMPLER_1D,
		SAMPLER_2D = GL_SAMPLER_2D,
		SAMPLER_3D = GL_SAMPLER_3D,
		SAMPLER_CUBE = GL_SAMPLER_CUBE,
		SAMPLER_1D_SHADOW = GL_SAMPLER_1D_SHADOW,
		SAMPLER_2D_SHADOW = GL_SAMPLER_2D_SHADOW
	};


	struct ShaderSource
	{
		enum GLShaderType type;
		std::string source;
	};


}